#+title: Majutsu (Jujutsu) for Emacs

Majutsu provides a magit-inspired interface for
[[https://github.com/martinvonz/jj][Jujutsu]], offering an efficient way to
interact with JJ repositories from within Emacs.

* Features
- *Magit-style log viewer* with collapsible sections and syntax highlighting
- *Interactive rebase* with visual source/destination selection via transients
- *Bookmark management* with create, abandon, forget, and track operations
- *Commit and describe* with dedicated message buffers and window management
- *Diff viewing* with file and hunk-level navigation
- *Context-sensitive actions* via DWIM (Do What I Mean) Enter key behavior
- *Git integration* with push/fetch operations and configurable options
- *Log transient* to tweak revsets, limits, and path filters on the fly
- *Built-in conflict resolution* using Emacs ediff and smerge-mode
- *Composable templates* through the bundled ~majutsu-template~ DSL for JJ output

* Requirements
- Emacs 26.1 or later
- [[https://github.com/jj-vcs/jj][Jujutsu (jj)]] installed and in PATH
- [[https://magit.vc/][magit]] (for section management and UI components)
- [[https://github.com/magit/transient][transient]] (usually bundled with magit)

* Installation
** Doom Emacs
#+begin_src emacs-lisp
(package! majutsu :recipe (:host github :repo "0WD0/majutsu"))
#+end_src

If you prefer a pre-built Doom module, you can drop in
[[https://github.com/0WD0/doom/tree/main/modules/tools/majutsu][0WD0/doom/modules/tools/majutsu]]
and enable it in your Doom config.

** use-package with straight.el
#+begin_src emacs-lisp
(use-package majutsu
  :straight (:host github :repo "0WD0/majutsu"))
#+end_src

** use-package with built-in package-vc integration
#+begin_src emacs-lisp
(use-package majutsu
  :vc (:url "https://github.com/0WD0/majutsu"))
#+end_src

** Manual
Clone this repository and add it to your load path:
#+begin_src emacs-lisp
(add-to-list 'load-path "/path/to/majutsu")
(require 'majutsu)
#+end_src

* Usage
Start with ~M-x majutsu-log~ to open the main interface. Each project gets its own
buffer (~*majutsu-log:project-name*~).

** Key Bindings
*** Navigation
- ~n~ / ~p~ - Navigate between sections
- ~RET~ - Context-sensitive action (edit changeset, jump to file/line in diffs)
- ~.~ - Jump to current changeset (@)
- ~TAB~ - Toggle section folding

*** Basic Operations
- ~g~ - Refresh log
- ~c~ - Commit (opens message buffer)
- ~d~ - Describe changeset at point (opens message buffer)
- ~e~ - Edit changeset (jj edit)
- ~u~ - Undo last operation
- ~l~ - Log options transient
- ~R~ - Redo last operation
- ~s~ - Squash
- ~N~ - New changeset here

*** Advanced Operations
- ~r~ - Rebase transient menu
  - ~s~ - Set rebase source
  - ~d~ - Toggle rebase destination
  - ~r~ - Execute rebase
  - ~c~ - Clear selections
- ~b~ - Bookmark transient menu
  - ~c~ - Create bookmark
  - ~d~ - Delete bookmark
  - ~f~ - Forget bookmark
  - ~l~ - List bookmarks
  - ~s~ - Set bookmark to revision
  - ~m~ - Move bookmark(s) to revision
  - ~M~ - Move bookmark(s) to revision --allow-backwards
  - ~r~ - Rename bookmark
  - ~t~ - Track remote bookmark
  - ~u~ - Untrack remote bookmark
- ~G~ - Git operations transient
  - ~-n~ - Toggle --allow-new flag
  - ~-b~ - Set bookmark to push
  - ~p~ - Push
  - ~f~ - Fetch

*** Conflict Resolution
- ~E~ - Edit conflicts with ediff
- ~M~ - Edit conflicts with smerge-mode

*** Message Buffers
When editing commit/describe messages:
- ~C-c C-c~ - Finish and execute
- ~C-c C-k~ - Cancel

By default Majutsu sends commit/describe messages to ~jj~ via ~-m~ command-line
arguments. If you're on Windows without UTF-8 locale support this can mangle
non-ASCII text. Switch the delivery strategy through the
~majutsu-message-input-method~ option:

- ~argument~ (default) - keep using ~jj ... -m MESSAGE~.
  - Fast path, mirrors the raw CLI.
  - On Windows with legacy codepages, non-ASCII text will be mis-encoded.
- ~script~ - Majutsu launches ~jj~ with a temporary UTF-8 editor script.
  - Keeps the single-command `jj commit`/`jj describe` flow.
  - Works out of the box; no manual ~JJ_EDITOR~ setup. Temporary files are cleaned up automatically.
- ~stdin~ - Feed the buffer to ~jj describe --stdin~; Majutsu then calls ~jj new~.
  - Always sends UTF-8, so it sidesteps Windows codepage issues.
  - Uses two command, not one, can't undo at once.

Example:
#+begin_src emacs-lisp
(setq majutsu-message-input-method 'stdin)   ; or 'script
#+end_src

Tip for Windows users: if you see garbled UTF-8 descriptions, switch to `'script`.
This keeps the familiar `jj commit` flow while forcing Unicode-safe writes via
Majutsuâ€™s helper script.

** Workflow Example
1. ~M-x majutsu-log~ - Open JJ interface
2. Navigate to desired changeset with ~j~ / ~k~
3. ~c~ - Commit current changes
4. Edit message, ~C-c C-c~ to finish
5. ~r~ - Open rebase menu, select source with ~s~, destinations with ~d~, execute with ~r~
6. ~b~ - Manage bookmarks as needed
7. ~G~ ~p~ - Push to remote

* Template DSL
Majutsu includes ~majutsu-template.el~, an embedded DSL for building JJ
templates directly from Elisp (used by ~majutsu--log-template~).

- Use ~tpl~ / ~tpl-compile~ to embed literal vectors at compile time.
- Keyword sugar covers JJ built-ins plus helpers registered with
  ~majutsu-template-defkeyword~ or methods declared with ~:keyword t~.
- See =docs/majutsu-template-spec.org= for the evolving spec and TODO list.
- Usage patterns and safeguards live in =test/majutsu-template-test.el=.

* Configuration
#+begin_src emacs-lisp
;; Customize jj executable path if needed
(setq majutsu-executable "/path/to/jj")

;; Prefer alternative message delivery on Windows
;; (setq majutsu-message-input-method 'script)
#+end_src

* Contributing
Issues and pull requests welcome! This project aims to provide a solid JJ
interface while maintaining magit-like usability patterns.

Run the test suite with:
#+begin_src sh
emacs -Q --batch -L . -L test \
      -l majutsu-template.el \
      -l test/majutsu-template-test.el \
      -f ert-run-tests-batch-and-exit
#+end_src
