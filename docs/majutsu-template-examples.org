#+title: Majutsu 模板封装示例

本文展示如何使用 Elisp EDSL 构建 jj 模板，并给出编译后的产物。

约定
- 示例中的 ~;; =>~ 注释行展示编译后的 jj 模板字符串。
- Elisp 中的字符串会在编译阶段被安全转义。

* 1) Basic string and raw
- Elisp
#+begin_src emacs-lisp
(tpl [:concat [:str "Hello "] [:raw "self.author().name()"]])
#+end_src

- Compiled
#+begin_example
concat("Hello ", self.author().name())
#+end_example

* 2) 条件
- Elisp
#+begin_src emacs-lisp
(tpl-compile [:if
               (:raw "self.root()")
               (:str "(root)")
               (:raw "format_short_commit_id(self.commit_id())")])
#+end_src

- Compiled
#+begin_example
if(self.root(), "(root)", format_short_commit_id(self.commit_id()))
#+end_example

* 3) 标签与分隔
- Elisp
#+begin_src emacs-lisp
(tpl-compile [:separate [:str " "]
                           [:label "immutable" [:str "immutable"]]
                           [:label "conflict" [:str "conflict"]]])
#+end_src

- Compiled
#+begin_example
separate(" ", label("immutable", "immutable"), label("conflict", "conflict"))
#+end_example

* 4) JSON Lines 记录（便于稳健解析）
- Elisp
#+begin_src emacs-lisp
(tpl-compile
  [:concat
    [:str "{"]
    [:str "\"root\":"]
    [:raw "if(self.root(), true, false)"]
    [:str ",\"change_id\":"]
    [:json [:raw "format_short_change_id(self.change_id())"]]
    [:str ",\"commit_id\":"]
    [:json [:raw "self.commit_id()"]]
    [:str "}"]])
#+end_src

- Compiled
#+begin_example
concat("{", "\"root\":", if(self.root(), true, false), ",\"change_id\":", json(format_short_change_id(self.change_id())), ",\"commit_id\":", json(self.commit_id()), "}")
#+end_example

* 5) 书签的 map + join
- Elisp
#+begin_src emacs-lisp
(tpl-compile [:join [:str ", "] [:raw "self.bookmarks()"] b [:raw "b.name()"]])
#+end_src

- Compiled
#+begin_example
self.bookmarks().map(|b| b.name()).join(", ")
#+end_example

* 6) 构建紧凑的日志头（混合内置函数）
- Elisp
#+begin_src emacs-lisp
(tpl-compile
  [:concat
    [:raw "format_short_change_id_with_hidden_and_divergent_info(self)"]
    [:str " "]
    [:raw "format_short_signature_oneline(self.author())"]
    [:str " "]
    [:raw "format_timestamp(commit_timestamp(self))"]])
#+end_src

- Compiled
#+begin_example
concat(format_short_change_id_with_hidden_and_divergent_info(self), " ", format_short_signature_oneline(self.author()), " ", format_timestamp(commit_timestamp(self)))
#+end_example

* 7) 使用便捷宏（tpl / tpl-compile）
- 仅展开 AST（可继续组合）
#+begin_src emacs-lisp
(tpl [:concat [:str "Hello "] [:raw "self.author().name()"]])
#+end_src

- 直接编译为 jj 模板字符串
#+begin_src emacs-lisp
(tpl-compile [:concat
               [:json [:raw "format_short_change_id(self.change_id())"]]
               [:str " "]
               [:raw "format_timestamp(commit_timestamp(self))"]])
#+end_src

- Compiled
#+begin_example
concat(json(format_short_change_id(self.change_id())), " ", format_timestamp(commit_timestamp(self)))
#+end_example

* 8) 强制向量语法（仅 [] 支持）
- 所有 ~tpl~/~tpl-compile~ 的顶层 FORM 必须是向量：
#+begin_src emacs-lisp
(tpl-compile [:if (:raw "self.root()") (:str "(root)") (:raw "format_short_commit_id(self.commit_id())")])
#+end_src

* 9) 数字、布尔、:lit 与 :raw-e
- 数字与布尔
#+begin_src emacs-lisp
(tpl-compile [:call pad_end 8 [:str "abc"]])   ;; => pad_end(8, "abc")
(tpl-compile [:if t [:str "yes"] [:str "no"]]) ;; => if(true, "yes", "no")
#+end_src

- ~:lit~ 将 Elisp 值作为 jj 字符串字面量嵌入
#+begin_src emacs-lisp
(let ((name (user-full-name)))
  (tpl-compile [:concat [:str "Author: "] [:lit name]]))
#+end_src

- ~:raw-e~ 将 Elisp 表达式求值结果原样注入
#+begin_src emacs-lisp
(tpl-compile [:raw-e (format "format_timestamp(%s)" "commit_timestamp(self)")])
#+end_src

- ~:map~ 简写
#+begin_src emacs-lisp
(tpl-compile [:map [:raw "self.bookmarks()"] b [:raw "b.name()"]])
#+end_src
#+begin_example
self.bookmarks().map(|b| b.name())
#+end_example

* 10) 运算符与方法
- 运算符（统一加括号避免优先级歧义）
#+begin_src emacs-lisp
(tpl-compile [:+ 1 2])                          ;; => (1 + 2)
(tpl-compile [:and (:> 3 1) (:<= 2 2)])         ;; => ((3 > 1) && (2 <= 2))
(tpl-compile [:concat-op (:str "a") (:str "b")]) ;; => ("a" ++ "b")
#+end_src

- 方法
#+begin_src emacs-lisp
(tpl-compile [:method (:raw "self") commit_id])
(tpl-compile [:method (:raw "self") diff (:raw "\"src\"")])
#+end_src
#+begin_example
self.commit_id()
self.diff("src")
#+end_example

* 11) 引用语法糖与 :call 名称来源
- 引用语法糖：~'sym → [:raw "sym"]~；~'"str" → [:str "str"]~
#+begin_src emacs-lisp
(tpl-compile [:concat 'self.conflict])    ;; => concat(self.conflict)
(tpl-compile [:concat '"X"])            ;; => concat("X")
#+end_src

- :call 名称来源
  - 符号/字符串：
#+begin_src emacs-lisp
(tpl-compile [:call json " "])          ;; => json(" ")
(tpl-compile [:call "json" " "])        ;; => json(" ")
#+end_src
  - 引用或宏期计算：
#+begin_src emacs-lisp
(tpl-compile [:call 'json " "])         ;; => json(" ")
(tpl-compile [:call (:raw-e (symbol-name 'json)) " "])  ;; => json(" ")
#+end_src
